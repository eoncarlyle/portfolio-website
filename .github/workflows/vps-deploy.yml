name: Build and Deploy Container Images to VPS

on:
  push:
    branches:
      - main
    paths:
      - "portfolio-application/**"
      - ".github/workflows/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/portfolio-application
  # Calendar versioning strategy (YYYY.MM.DD.MINOR)
  YEAR: ${{ format('{0:yyyy}', github.event.repository.pushed_at) }}
  MONTH: ${{ format('{0:MM}', github.event.repository.pushed_at) }}
  DAY: ${{ format('{0:dd}', github.event.repository.pushed_at) }}
  VERSION: ${{ format('{0:yyyy.MM.dd}', github.event.repository.pushed_at) }}.${{ github.run_number }}

jobs:
  build_and_push:
    runs-on: [self-hosted, new-york-0] # Using your self-hosted runner

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Build .NET application
        run: |
          cd portfolio-application
          dotnet publish -c Release

      - name: Generate version info if needed
        if: env.VERSION == ''
        run: |
          echo "VERSION=$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_ENV

      - name: Log in to the Container registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract metadata for container
        id: meta
        run: |
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Build and push container image
        run: |
          cd ./portfolio-application
          sudo podman build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} .
          sudo podman tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          sudo podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          sudo podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy_test:
    needs: build_and_push
    runs-on: [self-hosted, new-york-0]

    steps:
      - name: Log in to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Network
        run: |
          sudo podman network exists podman_bridge_rootfull || \
          sudo podman network create --driver bridge \
            --subnet 192.168.100.0/24 \
            --gateway 192.168.100.1 \
            podman_bridge_rootfull

      - name: Pull latest image
        run: |
          sudo podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Deploy to test environment
        run: |
          sudo podman run -d \
            --name portfolio-application-1-test \
            --replace \
            --network podman_bridge_rootfull \
            --ip 192.168.100.71 \
            --tls-verify=false \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            192.168.100.71 1080

      - name: Verify Container Deployments
        run: |
          sudo podman ps --format "{{.Names}}: {{.Status}}"

      - name: Verify success
        run: |
          curl -I https://test.iainschmitt.com

  deploy_prod:
    needs: deploy_test
    runs-on: [self-hosted, new-york-0]

    steps:
      - name: Deploy to production environment
        run: |
          sudo podman run -d \
            --name portfolio-application-1 \
            --replace \
            --network podman_bridge_rootfull \
            --ip 192.168.100.41 \
            --tls-verify=false \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            192.168.100.41 1080

      - name: Tag as stable if successful
        if: success()
        run: |
          sudo podman tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          sudo podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable

      - name: Verify Container Deployments
        run: |
          sudo podman ps --format "{{.Names}}: {{.Status}}"

      - name: Verify success
        run: |
          curl -I https://iainschmitt.com
